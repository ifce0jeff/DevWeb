// <auto-generated />
using B_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace B_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200304010720_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("B_API.Controllers.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hora")
                        .HasColumnType("TEXT");

                    b.Property<int>("RestauranteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RestauranteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Reservas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = "04/03/2020",
                            Hora = "19:00",
                            RestauranteId = 2,
                            UsuarioId = 2
                        },
                        new
                        {
                            Id = 2,
                            Data = "04/03/2020",
                            Hora = "13:00",
                            RestauranteId = 1,
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("B_API.Controllers.Models.Restaurante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Categoria")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Endereco")
                        .HasColumnType("TEXT");

                    b.Property<string>("Especialidade")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Preco")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Restaurantes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = 2,
                            Endereco = "McDonald",
                            Especialidade = "Laches",
                            Nome = "McDonald",
                            Preco = 1,
                            Status = "Aberto"
                        },
                        new
                        {
                            Id = 2,
                            Categoria = 3,
                            Endereco = "LaParrilla",
                            Especialidade = "Hamburguer",
                            Nome = "LaParrilla",
                            Preco = 2,
                            Status = "Fechado"
                        });
                });

            modelBuilder.Entity("B_API.Controllers.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Facebook")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sobre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Twitter")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "iesus90@gmail.com",
                            Facebook = "Iesus Silva",
                            Nome = "Iesus",
                            Senha = "1234",
                            Sobre = "Gosto de Comer",
                            Twitter = "iesus"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Jeff@gmail.com",
                            Facebook = "Jefferson Nunes",
                            Nome = "Jefferson",
                            Senha = "4321",
                            Sobre = "Gosto de conhecer novos lugares",
                            Twitter = "Jeff"
                        });
                });

            modelBuilder.Entity("B_API.Controllers.Models.Reserva", b =>
                {
                    b.HasOne("B_API.Controllers.Models.Restaurante", "Restaurante")
                        .WithMany()
                        .HasForeignKey("RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B_API.Controllers.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
